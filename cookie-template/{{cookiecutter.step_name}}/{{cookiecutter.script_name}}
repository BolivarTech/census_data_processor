"""
{{cookiecutter.short_description}}

{{cookiecutter.long_description}}

By: {{cookiecutter.author_name}}
Version: {{cookiecutter.version}}
Date:  ## Set Release Date Here  ##
Revision {{cookiecutter.version}} ( ## Set Release Date ## ): Initial Release
"""

# Main System Imports
from argparse import ArgumentParser
import logging as log
import logging.handlers
import sys
import os
import platform

# Main Logger
logHandler = None
logger = None
logLevel_ = logging.INFO


def build_argparser():
    """
    Parse command line arguments.

    :return: command line arguments
    """

    parser = ArgumentParser(prog="{{cookiecutter.step_name}}",
                            description="{{cookiecutter.short_description}}")

{% for arg_name in cookiecutter.parameters.split(",") %}
    parser.add_argument(
        "--{{arg_name}}", 
        type=## INSERT TYPE HERE: str, float or int,
        help=## INSERT DESCRIPTION HERE,
        default=## INSERT DEFAULT VALUE HERE,
        required=True
    )
{% endfor %}

    return parser.parse_args()


def main(args):
    """
     Run the main function

     args: command line arguments
    """

    global logger

    ######################
    # YOUR CODE HERE     #
    ######################


if __name__ == '__main__':

    computer_name = platform.node()
    script_name = "{{cookiecutter.step_name}}"
    loggPath = os.path.join(".","log")
    if not os.path.isdir(loggPath):
        try:
            # mode forced due security
            mode = 0o770
            os.mkdir(loggPath, mode=mode)
        except OSError as error:
            print(error)
            exit(-1)
    LogFileName = os.path.join(loggPath, 
                               computer_name + '-' + script_name + '.log')
    # Configure the logger
    logger = log.getLogger(script_name)  # Get Logger
    # Add the log message file handler to the logger
    logHandler = log.handlers.RotatingFileHandler(LogFileName, 
                                                  maxBytes=10485760, 
                                                  backupCount=10)
    # Logger Formater
    logFormatter = log.Formatter(fmt='%(asctime)s - %(name)s - %(levelname)s: %(message)s',
                                datefmt='%Y/%m/%d %H:%M:%S')
    logHandler.setFormatter(logFormatter)
    # Add handler to logger
    if 'logHandler' in globals():
        logger.addHandler(logHandler)
    else:
        logger.debug("logHandler NOT defined (001)")
    # Set Logger Lever
    logger.setLevel(logLevel_)
    # Start Running
    logger.debug("Running... (002)")
    args = build_argparser()
    main(args)
    logger.debug("Finished. (003)")
